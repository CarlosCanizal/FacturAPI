// Generated by CoffeeScript 1.6.3
var crypto, fs, x, xslt;

x = require('libxmljs');

xslt = require('node_xslt');

crypto = require('crypto');

fs = require('./read_file');

module.exports = {
  validate_schema: function(filename) {
    var err, error, is_valid, xml, xml_string, xsd, xsd_string;
    xsd = fs.read_file_sync('schemas/cfdv32.xsd');
    if (!xsd.status) {
      return xsd;
    }
    xml = fs.read_file_sync(filename);
    if (!xml.status) {
      return xml;
    }
    try {
      xsd_string = x.parseXmlString(xsd.data);
    } catch (_error) {
      err = _error;
      return {
        code: 500,
        status: false,
        error: err
      };
    }
    try {
      xml_string = x.parseXmlString(xml.data);
    } catch (_error) {
      error = _error;
      return {
        code: 400,
        status: false,
        error: error
      };
    }
    is_valid = xml_string.validate(xsd_string);
    if (is_valid) {
      return {
        code: 200,
        status: true,
        xml: xml_string
      };
    }
    return {
      code: 300,
      status: false,
      error: 'Invalid xml, not schema structure'
    };
  },
  get_cadena_original: function(xml) {
    var cadena_original, err, factura, params, transformedString;
    factura = xslt.readXmlString(xml);
    try {
      cadena_original = xslt.readXsltFile('schemas/cadenaoriginal_3_2.xslt');
    } catch (_error) {
      err = _error;
      return {
        code: 500,
        status: false,
        error: err
      };
    }
    params = [];
    transformedString = xslt.transform(cadena_original, factura, params);
    return {
      code: 200,
      status: true,
      cadena_original: transformedString,
      error: []
    };
  },
  get_digest: function(cadena_original) {
    var digest, shasum;
    shasum = crypto.createHash('sha1');
    shasum.update(cadena_original, 'utf8');
    digest = shasum.digest('hex');
    return {
      code: 200,
      status: true,
      digest: digest
    };
  },
  sign_digest: function(certificado, digest) {
    var key, pem, sign, signature;
    pem = fs.read_file_sync(certificado);
    if (!pem.status) {
      return pem;
    }
    pem = pem.data;
    key = pem.toString('ascii');
    sign = crypto.createSign('RSA-SHA256');
    sign.update(digest);
    signature = sign.sign(key, 'base64');
    if (signature) {
      return {
        code: 200,
        status: true,
        signature: signature
      };
    }
    return {
      code: 409,
      status: false,
      error: 'Error signing xml, check your PEM file.'
    };
  },
  sign_cfdi: function(xml, certificado) {
    var cfdi, digest, result, signature;
    cfdi = this.validate_schema(xml);
    if (!cfdi.status) {
      return cfdi;
    }
    result = this.get_cadena_original(cfdi.xml);
    if (!result.status) {
      return result;
    }
    digest = this.get_digest(result.cadena_original);
    signature = this.sign_digest(certificado, digest.digest);
    return signature;
  }
};
